service: image-app-api

# Create an optimized package for our functions
package:
  individually: true

plugins:
  - serverless-bundle # Package our functions with Webpack
  - serverless-offline
  - serverless-dotenv-plugin # Load .env as environment variables

provider:
  name: aws
  runtime: nodejs12.x
  stage: prod
  region: us-east-2

  # These environment variables are made available to our functions
  # under process.env.
  environment:
    tableNameUsers: users
    tableNameImages: images

  # 'iamRoleStatements' defines the permission policy for the Lambda function.
  # In this case Lambda functions are granted with permissions to access DynamoDB.
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:BatchGetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:us-east-2:*:*"

functions:
  # Defines an HTTP API endpoint that calls the main function in create.js
  # - path: url path is /notes
  # - method: POST request
  # - cors: enabled CORS (Cross-Origin Resource Sharing) for browser cross
  #     domain api call
  # - authorizer: authenticate using the AWS IAM role
  createUser:
    handler: user.create
    events:
      - http:
          path: userCreate
          method: post
          cors: true
          authorizer: aws_iam
  getUser:
    # Defines an HTTP API endpoint that calls the main function in get.js
    # - path: url path is /notes/{id}
    # - method: GET request
    handler: user.get
    events:
      - http:
          path: userGet
          method: get
          cors: true
          authorizer: aws_iam
  createImage:
    handler: image.create
    events:
      - http:
          path: imageCreate
          method: post
          cors: true
          authorizer: aws_iam
  getImage:
    handler: image.get
    events:
      - http:
          path: getImage
          method: get
          cors: true
  getSpecific:
    # Defines an HTTP API endpoint that calls the main function in get.js
    # - path: url path is /notes/{id}
    # - method: GET request
    handler: image.getSpecific
    events:
      - http:
          path: images/{id}
          method: get
          cors: true
          authorizer: aws_iam
  addCart:
    handler: cart.add
    events:
      - http:
          path: addCart
          method: post
          cors: true
          authorizer: aws_iam
  getCart:
    handler: cart.get
    events:
      - http:
          path: getCart
          method: get
          cors: true
          authorizer: aws_iam
  removeCart:
    handler: cart.remove
    events:
      - http:
          path: removeCart
          method: post
          cors: true
          authorizer: aws_iam
# Create our resources with separate CloudFormation templates
resources:
  # API Gateway Errors
  - ${file(resources/api-gateway-errors.yml)}               